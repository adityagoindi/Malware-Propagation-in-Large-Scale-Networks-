import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

public class IDSManager extends JFrame implements ActionListener {
	
Container c;
	
	
	
	Font f1 = new Font("Times New Roman",Font.BOLD,18);
	
	Font f3 = new Font("Times New Roman",Font.BOLD,25);
	
	Font f2 = new Font("Times New Roman",Font.BOLD,16);
	Font f4 = new Font("Times New Roman",Font.BOLD,14);
	
	
	JLabel status,info;
	JMenuBar mb;
	JMenu m;
	JMenuItem m1,m2,m3,mi1;

	ImageIcon b1 = new ImageIcon(this.getClass().getResource("b1.png"));
	ImageIcon b2 = new ImageIcon(this.getClass().getResource("b2.png"));
	
	ImageIcon t1 = new ImageIcon(this.getClass().getResource("t1.png"));
	ImageIcon t2 = new ImageIcon(this.getClass().getResource("t2.png"));
	
	ImageIcon g1 = new ImageIcon(this.getClass().getResource("gl1.png"));
	ImageIcon g2 = new ImageIcon(this.getClass().getResource("gl2.png"));
	
	ImageIcon bar = new ImageIcon(this.getClass().getResource("bar.png"));
	ImageIcon gar = new ImageIcon(this.getClass().getResource("gar.png"));
	
	ImageIcon bap = new ImageIcon(this.getClass().getResource("bap.png"));
	ImageIcon gap = new ImageIcon(this.getClass().getResource("gap.png"));
	
	ImageIcon bnp = new ImageIcon(this.getClass().getResource("bnp.png"));
	ImageIcon gnp = new ImageIcon(this.getClass().getResource("gnp.png"));
	
	ImageIcon btpg = new ImageIcon(this.getClass().getResource("btpg.png"));
	ImageIcon gtpg = new ImageIcon(this.getClass().getResource("gtpg.png"));
	
	
	ImageIcon fdb = new ImageIcon(this.getClass().getResource("fdb.png"));
	ImageIcon gfdb = new ImageIcon(this.getClass().getResource("gfdb.png"));
	
	
	JLabel l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11;
	JLabel lb1,lb2,lb3,lb4,lnp,ltpg,lua,lla,lfdb,lap,lt1,lt2;
	IDSManager() {
		c=getContentPane();
		c.setLayout(null);
		c.setBackground(Color.white);
		
		Border b11=BorderFactory.createLineBorder(Color.black,2);
		
		TitledBorder b22=new TitledBorder(b11);
		b22.setTitle("Step-1");
		b22.setTitleColor(Color.blue);
		b22.setTitleFont(f2);
		JLabel bord =new JLabel();
		bord.setBorder(b22);
		bord.setBackground(Color.black);
		bord.setBounds(10, 100, 150, 280);
		c.add(bord);
		
		
		ImageIcon banner = new ImageIcon(this.getClass().getResource("cooltext241529958319871.png"));
		 JLabel title = new JLabel();
		 title.setIcon(banner);
		 title.setBounds(0, -10, 850,110);
		
		TitledBorder b23=new TitledBorder(b11);
		b23.setTitle("Step-2");
		b23.setTitleColor(Color.blue);
		b23.setTitleFont(f2);
		JLabel bord1 =new JLabel();
		bord1.setBorder(b23);
		bord1.setBackground(Color.black);
		bord1.setBounds(155, 100, 200, 280);
		c.add(bord1);
		
		TitledBorder b24=new TitledBorder(b11);
		b24.setTitle("Step-3");
		b24.setTitleColor(Color.blue);
		b24.setTitleFont(f2);
		JLabel bord2 =new JLabel();
		bord2.setBorder(b24);
		bord2.setBackground(Color.black);
		bord2.setBounds(350, 100, 450, 280);
		c.add(bord2);
		
		lb1=new JLabel();
		lb1.setIcon(b1);
		lb1.setBounds(345,200,100,100);
		c.add(lb1);
		
		lb2=new JLabel();
		lb2.setIcon(b2);
		lb2.setBounds(390,195,100,100);
		c.add(lb2);
		
		lb3=new JLabel();
		lb3.setIcon(b1);
		lb3.setBounds(395,150,100,100);
		c.add(lb3);
		
		lb4=new JLabel();
		lb4.setIcon(b1);
		lb4.setBounds(395,245,100,100);
		c.add(lb4);
		
		lnp=new JLabel();
		lnp.setIcon(bnp);
		lnp.setBounds(450,140,100,100);
		c.add(lnp);
		
		ltpg=new JLabel();
		ltpg.setIcon(btpg);
		ltpg.setBounds(450,250,100,100);
		c.add(ltpg);
		
		lua=new JLabel();
		lua.setIcon(bar);
		lua.setBounds(545,140,100,100);
		c.add(lua);
		
		lla=new JLabel();
		lla.setIcon(bar);
		lla.setBounds(545,250,100,100);
		c.add(lla);
		
		lfdb=new JLabel();
		lfdb.setIcon(fdb);
		lfdb.setBounds(635,135,100,100);
		c.add(lfdb);
		
		lap=new JLabel();
		lap.setIcon(bap);
		lap.setBounds(635,250,100,100);
		c.add(lap);
		
		
		lt1=new JLabel();
		lt1.setIcon(t1);
		lt1.setBounds(665,185,100,100);
		c.add(lt1);
		
		lt2=new JLabel();
		lt2.setIcon(t2);
		lt2.setBounds(665,300,100,100);
		c.add(lt2);
		
		l1=new JLabel("Service Provider");
		l1.setFont(f2);
		l1.setForeground(Color.black);
		l1.setBounds(30, 120, 200, 200);
		c.add(l1);
		
		l2=new JLabel("Sending File");
		l2.setFont(f2);
		l2.setForeground(Color.black);
		l2.setBounds(40, 140, 200, 200);
		c.add(l2);
		
		l3=new JLabel("Router Status");
		l3.setFont(f1);
		l3.setForeground(Color.black);
		l3.setBounds(200, 40, 200, 200);
		c.add(l3);
		
		l4=new JLabel("1. Normal Data");
		l4.setFont(f2);
		l4.setForeground(Color.black);
		l4.setBounds(180, 90, 200, 200);
		c.add(l4);
		
		l5=new JLabel("2. Traffic Found");
		l5.setFont(f2);
		l5.setForeground(Color.black);
		l5.setBounds(180, 140, 200, 200);
		c.add(l5);
		
		l6=new JLabel("3. Malicious Data");
		l6.setFont(f2);
		l6.setForeground(Color.black);
		l6.setBounds(180, 190, 200, 200);
		c.add(l6);
		
		l7=new JLabel("Reading Phase");
		l7.setFont(f4);
		l7.setForeground(Color.black);
		l7.setBounds(360, 80, 200, 200);
		c.add(l7);
		
		l8=new JLabel("Testing Phase");
		l8.setFont(f4);
		l8.setForeground(Color.black);
		l8.setBounds(360, 205, 200, 200);
		c.add(l8);
		
		l9=new JLabel("Normal Data Found");
		l9.setFont(f4);
		l9.setForeground(Color.green.darker());
		l9.setBounds(625, 155, 200, 200);
		c.add(l9);
		
		l10=new JLabel("Traffic Found");
		l10.setFont(f4);
		l10.setForeground(Color.red);
		l10.setBounds(645, 270, 200, 200);
		c.add(l10);
		
		l11=new JLabel("Malicious Data Found");
		l11.setFont(f4);
		l11.setForeground(Color.red);
		l11.setBounds(620, 270, 200, 200);
		c.add(l11);
		
		l7.setVisible(false);
		l8.setVisible(false);
		l9.setVisible(false);
		l10.setVisible(false);
		l11.setVisible(false);
		lt1.setVisible(false);
		lt2.setVisible(false);
		
		mb = new JMenuBar();
		m = new JMenu("File");
		mi1 = new JMenuItem("Normal Transfer Details");
		m1 = new JMenuItem("Attacked Node Details");
		m2 = new JMenuItem("Traffic Node Details");
		m3 = new JMenuItem("Exit");
		m.add(mi1);
		m.add(m1);
		m.add(m2);
		m.add(m3);
		mb.add(m);
		
		c.add(title);
		
		 setJMenuBar(mb);
		 m1.addActionListener(this);
		 mi1.addActionListener(this);
		 m2.addActionListener(this);
		 m3.addActionListener(this);
		setTitle("Epidemic Model for Malware Propagation"); 
		setSize(840,460);
		setVisible(true);
		
		int[] ports = new int[] {2014,2015,2016};
		for (int i = 0; i < 3; i++) {
			Thread th = new Thread(new PortListener(ports[i]));
			th.start();

		}
	}
	
	class PortListener implements Runnable {
		int port;

		PortListener(int port) {
			this.port = port;
		}

		public void run() {
			
			
			
			if(this.port==2016)
			{
				
				try {
					ServerSocket sc = new ServerSocket(2016);
					while (true) {
						Socket s = sc.accept();
						DataInputStream din = new DataInputStream(s.getInputStream());
						
						String inf=din.readUTF();
						
						
						l1.setVisible(false);
						l1.setForeground(Color.green.darker());
						l1.setVisible(true);
						
						l2.setVisible(false);
						l2.setForeground(Color.green.darker());
						l2.setVisible(true);
						Thread.sleep(1000);
						l3.setVisible(false);
						l3.setForeground(Color.green.darker());
						l3.setVisible(true);
						Thread.sleep(1000);
						l4.setVisible(false);
						l4.setForeground(Color.green.darker());
						l4.setVisible(true);
						Thread.sleep(1000);
						lb1.setVisible(false);
						lb1.setIcon(g1);
						lb1.setVisible(true);
						Thread.sleep(1000);
						lb2.setVisible(false);
						lb2.setIcon(g2);
						lb2.setVisible(true);
						Thread.sleep(1000);
						Thread.sleep(1000);
						l7.setVisible(true);
						lb3.setVisible(false);
						lb3.setIcon(g1);
						lb3.setVisible(true);
						Thread.sleep(1000);
						lnp.setVisible(false);
						lnp.setIcon(gnp);
						lnp.setVisible(true);
						Thread.sleep(1000);
						lua.setVisible(false);
						lua.setIcon(gar);
						lua.setVisible(true);
						Thread.sleep(1000);
						lfdb.setVisible(false);
						lfdb.setIcon(gfdb);
						lfdb.setVisible(true);
						Thread.sleep(1000);
						lt1.setVisible(true);
						Thread.sleep(1000);
						l9.setVisible(true);
						Thread.sleep(1000);
						
						DBCon db = new DBCon();
						Connection con = db.getConnection();
						Statement stmt = con.createStatement();
						SimpleDateFormat sdfDate = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat sdfTime = new SimpleDateFormat(
								"HH:mm:ss");

						Date now = new Date();

						String strDate = sdfDate.format(now);
						String strTime = sdfTime.format(now);
						String dt = strDate + "   " + strTime;
						String sql = "insert into normal values('"+strDate+"','"+strTime+"','Normal Data Transfer')";
						stmt.executeUpdate(sql);
						
						 DataOutputStream dout = new DataOutputStream(s.getOutputStream());
						 dout.writeUTF("success");
						 Thread.sleep(2000);
						 refresh();
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				
				
				
			}

			if(this.port==2015)
			{
				
				try {
					ServerSocket sc = new ServerSocket(2015);
					while (true) {
						Socket s = sc.accept();
						DataInputStream din = new DataInputStream(s.getInputStream());
						String node = din.readUTF();
						String ip=din.readUTF();
						
						l1.setVisible(false);
						l1.setForeground(Color.green.darker());
						l1.setVisible(true);
						
						l2.setVisible(false);
						l2.setForeground(Color.green.darker());
						l2.setVisible(true);
						Thread.sleep(1000);
						l3.setVisible(false);
						l3.setForeground(Color.green.darker());
						l3.setVisible(true);
						Thread.sleep(1000);
						l6.setVisible(false);
						l6.setForeground(Color.green.darker());
						l6.setVisible(true);
						Thread.sleep(1000);
						lb1.setVisible(false);
						lb1.setIcon(g1);
						lb1.setVisible(true);
						Thread.sleep(1000);
						lb2.setVisible(false);
						lb2.setIcon(g2);
						lb2.setVisible(true);
						Thread.sleep(1000);
						Thread.sleep(1000);
						l8.setVisible(true);
						lb4.setVisible(false);
						lb4.setIcon(g1);
						lb4.setVisible(true);
						Thread.sleep(1000);
						ltpg.setVisible(false);
						ltpg.setIcon(gtpg);
						ltpg.setVisible(true);
						Thread.sleep(1000);
						lla.setVisible(false);
						lla.setIcon(gar);
						lla.setVisible(true);
						Thread.sleep(1000);
						lap.setVisible(false);
						lap.setIcon(gap);
						lap.setVisible(true);
						Thread.sleep(1000);
						lt2.setVisible(true);
						Thread.sleep(1000);
						l11.setVisible(true);
						Thread.sleep(1000);
						DBCon db = new DBCon();
						Connection con = db.getConnection();
						Statement stmt = con.createStatement();
						SimpleDateFormat sdfDate = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat sdfTime = new SimpleDateFormat(
								"HH:mm:ss");

						Date now = new Date();

						String strDate = sdfDate.format(now);
						String strTime = sdfTime.format(now);
						String dt = strDate + "   " + strTime;
						String sql = "insert into Hacker values('Malicious Attacker','"+ip+"','"+node+"','"+dt+"')";
						stmt.executeUpdate(sql);
						
						 DataOutputStream dout = new DataOutputStream(s.getOutputStream());
						 dout.writeUTF("success");
						 Thread.sleep(2000);
						 refresh();
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				
				
				
			}

			
			if(this.port==2014)
			{
				
				try {
					ServerSocket sc = new ServerSocket(2014);
					while (true) {
						Socket s = sc.accept();
						DataInputStream din = new DataInputStream(s.getInputStream());
						String node = din.readUTF();
						String bw=din.readUTF();
						
						l1.setVisible(false);
						l1.setForeground(Color.green.darker());
						l1.setVisible(true);
						
						l2.setVisible(false);
						l2.setForeground(Color.green.darker());
						l2.setVisible(true);
						Thread.sleep(1000);
						l3.setVisible(false);
						l3.setForeground(Color.green.darker());
						l3.setVisible(true);
						Thread.sleep(1000);
						l5.setVisible(false);
						l5.setForeground(Color.green.darker());
						l5.setVisible(true);
						Thread.sleep(1000);
						lb1.setVisible(false);
						lb1.setIcon(g1);
						lb1.setVisible(true);
						Thread.sleep(1000);
						lb2.setVisible(false);
						lb2.setIcon(g2);
						lb2.setVisible(true);
						Thread.sleep(1000);
						Thread.sleep(1000);
						l8.setVisible(true);
						lb4.setVisible(false);
						lb4.setIcon(g1);
						lb4.setVisible(true);
						Thread.sleep(1000);
						ltpg.setVisible(false);
						ltpg.setIcon(gtpg);
						ltpg.setVisible(true);
						Thread.sleep(1000);
						lla.setVisible(false);
						lla.setIcon(gar);
						lla.setVisible(true);
						Thread.sleep(1000);
						lap.setVisible(false);
						lap.setIcon(gap);
						lap.setVisible(true);
						Thread.sleep(1000);
						lt2.setVisible(true);
						Thread.sleep(1000);
						l10.setVisible(true);
						Thread.sleep(1000);
					
						
						
						DBCon db = new DBCon();
						Connection con = db.getConnection();
						Statement stmt = con.createStatement();
						SimpleDateFormat sdfDate = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat sdfTime = new SimpleDateFormat(
								"HH:mm:ss");

						Date now = new Date();

						String strDate = sdfDate.format(now);
						String strTime = sdfTime.format(now);
						String dt = strDate + "   " + strTime;
						String sql = "insert into traffic values('"+node+"','"+bw+"','"+dt+"','Traffic Occurred')";
						stmt.executeUpdate(sql);
						
						 DataOutputStream dout = new DataOutputStream(s.getOutputStream());
						 dout.writeUTF("success");
						 Thread.sleep(2000);
						 refresh();
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				
				
				
			}
			
			
			
			

		}
	}
	public void refresh()
	{
		try
		{
			Thread.sleep(2000);
			l7.setVisible(false);
			l8.setVisible(false);
			l9.setVisible(false);
			l10.setVisible(false);
			l11.setVisible(false);
			lt1.setVisible(false);
			lt2.setVisible(false);
			
			lb1.setVisible(false);
			lb1.setIcon(b1);
			lb1.setVisible(true);
			
			lb2.setVisible(false);
			lb2.setIcon(b2);
			lb2.setVisible(true);
			
			lb3.setVisible(false);
			lb3.setIcon(b1);
			lb3.setVisible(true);
			
			lb4.setVisible(false);
			lb4.setIcon(b1);
			lb4.setVisible(true);
			
			lnp.setVisible(false);
			lnp.setIcon(bnp);
			lnp.setVisible(true);
			
			ltpg.setVisible(false);
			ltpg.setIcon(btpg);
			ltpg.setVisible(true);
			
			lua.setVisible(false);
			lua.setIcon(bar);
			lua.setVisible(true);
			
			lla.setVisible(false);
			lla.setIcon(bar);
			lla.setVisible(true);
			
			lfdb.setVisible(false);
			lfdb.setIcon(fdb);
			lfdb.setVisible(true);
			
			lap.setVisible(false);
			lap.setIcon(bap);
			lap.setVisible(true);
			
			l1.setVisible(false);
			l1.setForeground(Color.black);
			l1.setVisible(true);
			
			l2.setVisible(false);
			l2.setForeground(Color.black);
			l2.setVisible(true);
		
			l3.setVisible(false);
			l3.setForeground(Color.black);
			l3.setVisible(true);
			 
			l4.setVisible(false);
			l4.setForeground(Color.black);
			l4.setVisible(true);
			
			l5.setVisible(false);
			l5.setForeground(Color.black);
			l5.setVisible(true);
		
			l6.setVisible(false);
			l6.setForeground(Color.black);
			l6.setVisible(true);
	
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		
		
	}
	
	public void actionPerformed(ActionEvent e) 
	{
		
		if(e.getSource()==m3)
		{
		System.exit(0);
			
		}
		
		if(e.getSource()==mi1)
		{
			
			try {
				UIManager
						.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					new Normal();
				}
			});
		}
		if(e.getSource()==m1)
		{
			
			try {
				UIManager
						.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					new Attackerdetails();
				}
			});
		}
		if(e.getSource()==m2)
		{
			
			try {
				UIManager
						.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					new trafficdetails();
				}
			});
		}

	}

	public static void main(String[] args) {
		//new IDSManager();
		try {
			UIManager
					.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new IDSManager();
			}
		});
	}

}
